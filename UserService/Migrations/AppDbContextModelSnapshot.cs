// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using testTaskApp.Data;

#nullable disable

namespace testTaskApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("testTaskApp.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2025, 8, 7, 5, 1, 17, 575, DateTimeKind.Utc).AddTicks(330),
                            StartDate = new DateTime(2025, 5, 7, 5, 1, 17, 575, DateTimeKind.Utc).AddTicks(190),
                            Type = "Free"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2025, 7, 14, 5, 1, 17, 575, DateTimeKind.Utc).AddTicks(460),
                            StartDate = new DateTime(2025, 6, 30, 5, 1, 17, 575, DateTimeKind.Utc).AddTicks(440),
                            Type = "Trial"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2026, 1, 7, 5, 1, 17, 575, DateTimeKind.Utc).AddTicks(460),
                            StartDate = new DateTime(2025, 7, 7, 5, 1, 17, 575, DateTimeKind.Utc).AddTicks(460),
                            Type = "Super"
                        });
                });

            modelBuilder.Entity("testTaskApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@example.com",
                            Name = "Alice",
                            SubscriptionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@example.com",
                            Name = "Bob",
                            SubscriptionId = 3
                        },
                        new
                        {
                            Id = 3,
                            Email = "carlos@example.com",
                            Name = "Carlos",
                            SubscriptionId = 2
                        });
                });

            modelBuilder.Entity("testTaskApp.Models.User", b =>
                {
                    b.HasOne("testTaskApp.Models.Subscription", "Subscription")
                        .WithMany("Users")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("testTaskApp.Models.Subscription", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
